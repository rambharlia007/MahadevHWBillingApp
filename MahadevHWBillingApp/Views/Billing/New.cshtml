@{
    ViewBag.Title = "New";
}

@model MahadevHWBillingApp.Models.Profile

<style>
    @@page {
        size: auto;
        margin: 0mm;
    }

    .pointer {
        cursor: pointer;
    }

    .hide {
        display: none;
    }

    [v-cloak] {
        display: none;
    }

    .bg-grey {
        background-color: #eee;
    }
    .table-head, .table-body .table-row {
        display: table;
        width: 100%;
        table-layout: fixed;
    }

    @@media only screen and (min-width: 768px) {
        .table-body {
            display: block;
            height: 250PX;
            overflow-y: scroll;
        }
    }

    @@media only screen and (min-width: 992px) {
        .table-body {
            display: block;
            height: 200px;
            overflow-y: scroll;
        }
    }

    @@media only screen and (min-width: 1500px) {
        .table-body {
            display: block;
            max-height: 500px;
            overflow-y: scroll;
        }
    }
</style>

<div id="app" v-cloak>
    <div class="row d-print-none" style="background-color: #f6f7f8 !important;">
        <div class="col-md-8">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb" style="padding-bottom: 0px; margin-bottom: 0px; background-color: #f6f7f8 !important;">
                    <li class="breadcrumb-item"><i class="fa fa-home">&nbsp;</i><a href="#">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Billing</li>
                </ol>
            </nav>
            <h4 style="padding-left: 15px;">Billing</h4>
        </div>
        <div class="col-md-4">
            <button style="margin-top:25px; float:right;" type="button" class="btn btn-success btn-sm" v-if="!isPreview" v-on:click="showOrHidePreview(true)">Preview Print Bill</button>
            <button style="margin-top:25px; float:right;  margin-right:10px;" type="button" class="btn btn-success btn-sm" v-if="isPreview" v-on:click="showOrHidePreview(false)">Edit Bill</button>
            <button style="margin-top:25px; float:right;  margin-right:10px;" type="button" class="btn btn-success btn-sm" v-if="isPreview" v-on:click="print()">Print</button>
            <button style="margin-top:25px; float:right;  margin-right:10px;" type="button" class="btn btn-success btn-sm" v-on:click="save()">Save</button>
        </div>
    </div>
    <div style="margin-top:20px;">
        <div class="alert alert-success alert-dismissible fade show" role="alert" v-cloak v-bind:class="{hide:!alertMessage}" style="margin-top: 20px;">
            {{alertMessage}}
            <button type="button" class="close" v-on:click="closeAlertMessage('alertMessage')" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>

        <div v-cloak class="alert alert-danger alert-dismissible fade show" role="alert" v-bind:class="{hide:!alertFailureMessage}" style="margin-top: 20px;">
            {{alertFailureMessage}}
            <button type="button" class="close" v-on:click="closeAlertMessage('alertFailureMessage')" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>

        <div class="card" v-show="!isPreview">
            <div class="card-body" style="font-size: 14px;">
                <table class="table text-secondary" style="font-size: 14px;">
                    <thead class="thead-light table-head">
                    <tr class="table-row">
                        <th style="width: 45px" scope="col">#</th>
                        <th class="text-center" style="width: 200px;" scope="col">Name</th>
                        <th class="text-center" scope="col">Price</th>
                        <th class="text-center" scope="col">Quantity</th>
                        <th class="text-center" scope="col">GST %</th>
                        <th class="text-center" scope="col">CGST</th>
                        <th class="text-center" scope="col">SGST</th>
                        <th class="text-center" scope="col">Total</th>

                    </tr>
                    </thead>
                    <tbody class="table-body">
                    <tr class="table-row" v-for="(item,index) in items">
                        <td style="width: 45px">{{index+1}}</td>
                        <td style="width: 200px;" v-bind:["data-id"]="index">
                            <select class="product-select-2 js-example-basic-single js-states form-control"></select>
                        </td>
                        <td> <input type="text" v-model="item.Price" v-on:keyup="calculatePerItemAmount(index)" class="form-control form-control-sm"></td>
                        <td> <input type="text" v-model="item.Quantity" v-on:keyup="calculatePerItemAmount(index)" class="form-control form-control-sm"></td>
                        <td> <input type="text" v-model="item.GST" v-on:keyup="calculatePerItemAmount(index)" class="form-control form-control-sm"></td>
                        <td> <input type="text" readonly v-model="item.TotalCGSTAmount" class="form-control form-control-sm"></td>
                        <td> <input type="text" readonly v-model="item.TotalSGSTAmount" class="form-control form-control-sm"></td>
                        <td> <input type="text" readonly v-model="item.TotalAmount" class="form-control form-control-sm"></td>
                    </tr>
                    </tbody>
                </table>
                <hr/>
                <div class="row">
                    <div class="col-lg-6 col-sm-6">
                        <table class="table text-secondary" style="font-size: 14px;">
                            <thead class="thead-light">
                                <tr>
                                    <th class="text-center" scope="col">Customer Name</th>
                                    <th class="text-center" scope="col">Customer GSTIN</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td> <input type="text"  v-model="CustomerName" class="form-control form-control-sm"></td>
                                    <td> <input type="text"  v-model="CustomerGSTIN" class="form-control form-control-sm"></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <div class="col-lg-4 col-sm-5 ml-auto">
                        <table class="table table-sm table-clear">
                            <tbody>
                            <tr>
                                <td class="left">
                                    <strong>Subtotal</strong>
                                </td>
                                <td class="right">{{Number(subTotal).toLocaleString()}}</td>
                            </tr>
                            <tr>
                                <td class="left">
                                    <strong>TAX </strong>
                                </td>
                                <td class="right">{{Number(tax).toLocaleString()}}</td>
                            </tr>
                            <tr>
                                <td class="left">
                                    <strong>Total</strong>
                                </td>
                                <td class="right">
                                    <strong>{{Number(total).toLocaleString()}}</strong>
                                </td>
                            </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>


        <div class="card" v-show="isPreview" id="print-bill">
            <div class="card-header">
                Invoice
                <strong>{{Invoice}}</strong>
                <span class="float-right"> <strong>GSTIN:</strong> @Model.GSTIN</span>

            </div>
            <div class="card-body">
                <div class="row mb-4">
                    <div class="col-sm-6">
                        <h6 class="mb-3">From:</h6>
                        <div>
                            <strong>@Model.BusinessName</strong>
                        </div>
                        <div>@Model.Address</div>
                        <div>Bangalore 560036</div>
                        <div>Email: @Model.Email</div>
                        <div>Phone: @Model.MobileNumber</div>
                    </div>

                    <div class="col-sm-6">
                        <h6 class="mb-3">To:</h6>
                        <div>
                            <strong>{{CustomerName}}</strong>
                            </div>
                        <div>
                            <span>GSTIN</span>
                            <strong>{{CustomerGSTIN}}</strong>
                        </div>
                    </div>
                </div>

                <div class="table-responsive-sm">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th style="width:45px" scope="col">#</th>
                                <th style="width:200px;" scope="col">Name</th>
                                <th scope="col">Price</th>
                                <th scope="col">CGST</th>
                                <th scope="col">SGST</th>
                                <th scope="col">Quantity</th>
                                <th scope="col">Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="(item,index) in items" v-if="item.Name">
                                <td class="center">{{index+1}}</td>
                                <td class="left strong">{{item.Name}}</td>
                                <td class="right">{{Number(item.Price).toLocaleString()}}</td>
                                <td class="center">{{Number(item.TotalCGSTAmount).toLocaleString()}}</td>
                                <td class="center">{{Number(item.TotalSGSTAmount).toLocaleString()}}</td>
                                <td class="center">{{Number(item.Quantity).toLocaleString()}}</td>
                                <td class="center">{{Number(item.TotalAmount).toLocaleString()}}</td>
                            </tr>

                        </tbody>
                    </table>
                </div>
                <div class="row">
                    <div class="col-lg-4 col-sm-5">

                    </div>

                    <div class="col-lg-4 col-sm-5 ml-auto">
                        <table class="table table-sm table-clear">
                            <tbody>
                                <tr>
                                    <td class="left">
                                        <strong>Subtotal</strong>
                                    </td>
                                    <td class="right">{{Number(subTotal).toLocaleString()}}</td>
                                </tr>
                                <tr>
                                    <td class="left">
                                        <strong>TAX</strong>
                                    </td>
                                    <td class="right">{{Number(tax).toLocaleString()}}</td>
                                </tr>
                                <tr>
                                    <td class="left">
                                        <strong>Total</strong>
                                    </td>
                                    <td class="right">
                                        <strong>{{Number(total).toLocaleString()}}</strong>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {

        var items = [];

        for (i = 0; i < 25; i++) {
            items.push({
                Name: "",
                MeasuringUnit: "",
                Quantity: "",
                TotalCGSTAmount: "",
                TotalSGSTAmount: "",
                TotalAmount: "",
                Price: "",
                GST: "",
                CGST: "",
                SGST:"",
                ItemId: 0,
            })
        }

        function generateInvoiceNumber() {
            function pad2(n) {
                return (n < 10 ? '0' : '') + n;
            }
            var currentDate = new Date();
            return currentDate.getFullYear() +
                pad2(currentDate.getMonth() + 1) +
                pad2(currentDate.getDate()) +
                pad2(currentDate.getHours()) +
                pad2(currentDate.getMinutes()) +
                pad2(currentDate.getSeconds());
        }

        var obj = {
            alertFailureMessage: "",
            alertMessage: "",
            items: items,
            isPreview: false,
            isSelect2Rendered: true,
            CustomerName: "",
            CustomerGSTIN: "",
            Invoice: generateInvoiceNumber()
        }
        new Vue({
            el: '#app',
            data: obj,
            methods: {
                calculatePerItemAmount: function (index) {
                    var ref = this.items[index];
                    var taxInPercentage = ref.GST / 2;
                    ref.TotalAmount = ref.Price * ref.Quantity;
                    var tax = Math.round(((ref.TotalAmount * taxInPercentage) / 100) * 100) / 100;
                    ref.TotalCGSTAmount = tax;
                    ref.TotalSGSTAmount = tax;
                },
               
                showOrHidePreview: function (value) {
                    this.isPreview = value;
                },
                print: function () {
                    window.print();
                },
                beforePrint: function () {
                    alert("BeforePrint");
                },
                afterPrint: function () {
                    alert("Afetr Print");
                },
                save: function () {
                    var self = this;
                    var validData = [];
                    self.items.forEach((data) => {
                        if (data.Name && data.Quantity) {
                            validData.push(data);
                        }
                    })
                    if (validData.length) {
                        var date = new Date();
                        var finalData = {
                            SaleDetail: {
                                BusinessName: "@Model.BusinessName",
                                CustomerName: self.CustomerName,
                                CustomerGSTIN: self.CustomerGSTIN,
                                TotalCGSTAmount: self.tax / 2,
                                TotalSGSTAmount: self.tax / 2,
                                TotalAmount: self.total,
                                Invoice: self.Invoice,
                                SubTotal: self.subTotal,
                                Date: `${date.getDate()}-${date.getMonth()+1}-${date.getFullYear()}`
                            },
                            SaleItems: validData
                        }
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("Save", "Billing")',
                            data: JSON.stringify(finalData),
                            dataType: 'json',
                            contentType: 'application/json; charset=utf-8',
                            success: function () {
                                self.alertMessage = `${validData.length} purchase Added succesfully. ${30 - validData.length} Purchase were left empty`;
                                self.newPurchases = addEmptyPurchaseObject();
                            }
                        });
                    }
                },
                initSelect2: function () {
                    var self = this;
                    $(".product-select-2").select2({
                        ajax: {
                            url: "/item/GetDataBySearch",
                            dataType: 'json',
                            delay: 250,
                            data: function (params) {
                                return {
                                    q: params.term,
                                    page: params.page
                                };
                            },
                            processResults: function (data, params) {
                                var products = [];
                                data.forEach((product) => {
                                    products.push({
                                        id: product.Id,
                                        text: product.Name,
                                        Price: product.Price,
                                        CGST: product.CGST,
                                        SGST: product.SGST
                                    })
                                });

                                return {
                                    results: products
                                };
                            },
                            cache: true
                        },
                        placeholder: 'Search for a Product',
                        minimumInputLength: 1

                    });
                    $('.product-select-2').on('select2:select', function (e) {
                        let index = parseInt($(this).parent().attr('data-id'));
                        let data = e.params.data;

                        self.items[index].ItemId = data.id;
                        self.items[index].Name = data.text;
                        self.items[index].Price = data.Price;
                        self.items[index].GST = data.CGST + data.SGST;
                        self.items[index].CGST = data.CGST;
                        self.items[index].SGST = data.SGST
                        self.items[index].Quantity = 1;
                        self.calculatePerItemAmount(index);
                    });
                }
            },
            computed: {
                subTotal: function () {
                    var totalAmount = 0;
                    this.items.forEach(function (item) {
                        totalAmount += parseFloat(item.TotalAmount || 0);
                    })
                    return totalAmount;
                },
                tax: function () {
                    var totalTax = 0;
                    this.items.forEach(function (item) {
                        totalTax += Math.round((parseFloat(item.TotalCGSTAmount || 0) + parseFloat(item.TotalSGSTAmount || 0)) * 100) / 100;
                    })
                    return totalTax;
                },
                total: function () {
                    return Math.round((parseFloat(this.subTotal) + parseFloat(this.tax)) * 100) / 100;
                }
            },
            mounted() {
                var self = this;
                var url = window.location.href;
                var id = parseInt(url.substring(url.lastIndexOf('/') + 1));

                // Edit functionality
                if (Number.isInteger(id)) {
                    $.get(`/Sale/GetDataById/${id}`, function (data) {
                        self.items = data.SaleItems;
                        self.CustomerName = data.SaleDetail.CustomerName;
                        self.CustomerGSTIN = data.SaleDetail.CustomerGSTIN;
                        self.TotalCGSTAmount = self.tax / 2;
                        self.TotalSGSTAmount = self.tax / 2;
                        self.total = data.SaleDetail.TotalAmount;
                        self.Invoice = data.SaleDetail.Invoice;
                        self.SubTotal = data.SaleDetail.subTotal;
                        self.Date = data.SaleDetail.Date;
                    })
                }
                self.initSelect2();
                window.onbeforeprint = self.beforePrint;
                window.onafterprint = self.afterPrint;
            }
        })
    });
</script>


